data <- data.frame(
day_of_week= c("Sunday","Sunday", "Monday", "Monday", "Tuesday", "Tuesday",
"Wednesday", "Wednesday", "Thursday", "Thursday", "Friday", "Friday","Saturday", "Saturday"),
User_Type = c("Customers", "Subscriber","Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber" ),
percentage = c(41.68, 58.32, 17.63, 82.37, 15.49, 84.51, 14.63, 85.37, 14.86, 85.14, 20.74, 79.26, 41.68, 58.32)  # Values for variable Var2
)
data_level <- data %>%
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
data_graph <-  ggplot(data_level, aes(x = day_of_week, y = percentage, fill = User_Type)) +
geom_bar(position = "dodge", stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Percentage of Trips", title = "Percentage of Trips Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 15) +
easy_x_axis_title_size(size = 15) +
easy_plot_title_size(size = 16) +
easy_center_title() +
facet_grid(. ~ User_Type) +
coord_flip()
data_graph
#ggplotly(data_graph, tooltip = c("text"))
data <- data.frame(
day_of_week= c("Sunday","Sunday", "Monday", "Monday", "Tuesday", "Tuesday",
"Wednesday", "Wednesday", "Thursday", "Thursday", "Friday", "Friday","Saturday", "Saturday"),
User_Type = c("Customers", "Subscriber","Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber" ),
percentage = c(41.68, 58.32, 17.63, 82.37, 15.49, 84.51, 14.63, 85.37, 14.86, 85.14, 20.74, 79.26, 41.68, 58.32)  # Values for variable Var2
)
data_level <- data %>%
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
data_graph <-  ggplot(data_level, aes(x = day_of_week, y = percentage, fill = User_Type)) +
geom_bar(position = "dodge", stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Percentage of Trips", title = "Percentage of Trips Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 15) +
easy_x_axis_title_size(size = 15) +
easy_plot_title_size(size = 16) +
easy_center_title() +
facet_grid(. ~ User_Type) +
coord_flip()
data_graph
#ggplotly(data_graph, tooltip = c("text"))
data <- data.frame(
day_of_week= c("Sunday","Sunday", "Monday", "Monday", "Tuesday", "Tuesday",
"Wednesday", "Wednesday", "Thursday", "Thursday", "Friday", "Friday","Saturday", "Saturday"),
User_Type = c("Customers", "Subscriber","Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber" ),
percentage = c(41.68, 58.32, 17.63, 82.37, 15.49, 84.51, 14.63, 85.37, 14.86, 85.14, 20.74, 79.26, 41.68, 58.32)  # Values for variable Var2
)
data_level <- data %>%
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
data_graph <-  ggplot(data_level, aes(x = day_of_week, y = percentage, fill = User_Type)) +
geom_bar(position = "dodge", stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Percentage of Trips", title = "Percentage of Trips Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 15) +
easy_x_axis_title_size(size = 15) +
easy_plot_title_size(size = 16) +
easy_center_title() +
facet_grid(. ~ User_Type) +
coord_flip()
data_graph
#ggplotly(data_graph, tooltip = c("text"))
data <- data.frame(
day_of_week= c("Sunday","Sunday", "Monday", "Monday", "Tuesday", "Tuesday",
"Wednesday", "Wednesday", "Thursday", "Thursday", "Friday", "Friday","Saturday", "Saturday"),
User_Type = c("Customers", "Subscriber","Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber", "Customers", "Subscriber" ),
percentage = c(41.68, 58.32, 17.63, 82.37, 15.49, 84.51, 14.63, 85.37, 14.86, 85.14, 20.74, 79.26, 41.68, 58.32)  # Values for variable Var2
)
data_level <- data %>%
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
data_graph <-  ggplot(data_level, aes(x = day_of_week, y = percentage, fill = User_Type)) +
geom_bar(position = "dodge", stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Percentage of Trips", title = "Percentage of Trips Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 15) +
easy_x_axis_title_size(size = 15) +
easy_plot_title_size(size = 16) +
easy_center_title() +
facet_grid(. ~ User_Type) +
coord_flip()
data_graph
#ggplotly(data_graph, tooltip = c("text"))
days <-  cyclistic_data_clean %>%
select(Trip_id = `01 - Rental Details Rental ID`, `User Type`, day_of_week, ride_length) %>%
mutate(`Ride Length (in min)` = round(as.numeric(substr(ride_length, 1, 2)) * 60 +
as.numeric(substr(ride_length, 4, 5)) +
as.numeric(substr(ride_length, 7, 8))/60, 2)) %>%
group_by(day_of_week,`User Type` ) %>%
summarize(avg_ride_length = round(mean(`Ride Length (in min)`), 2)) %>%
arrange(day_of_week) %>%   # Optionally sort by day_of_week
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
days_graph <-  ggplot(days, aes(x = day_of_week, y = avg_ride_length, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("User Type: ", `User Type`,"\n","Ride Length: ", avg_ride_length))) +
geom_text(aes(label = paste0(round(avg_ride_length, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Trips length (in mins)", title = "Average Trip Length Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
scale_fill_viridis_d()+
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 16)+
easy_center_title() +
facet_grid(. ~ `User Type`) +
coord_flip()
ggplotly(days_graph, tooltip = c("text"))
days <-  cyclistic_data_clean %>%
select(Trip_id = `01 - Rental Details Rental ID`, `User Type`, day_of_week, ride_length) %>%
mutate(`Ride Length (in min)` = round(as.numeric(substr(ride_length, 1, 2)) * 60 +
as.numeric(substr(ride_length, 4, 5)) +
as.numeric(substr(ride_length, 7, 8))/60, 2)) %>%
group_by(day_of_week,`User Type` ) %>%
summarize(avg_ride_length = round(mean(`Ride Length (in min)`), 2)) %>%
arrange(day_of_week) %>%   # Optionally sort by day_of_week
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
days_graph <-  ggplot(days, aes(x = day_of_week, y = avg_ride_length, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("User Type: ", `User Type`,"\n","Ride Length: ", avg_ride_length))) +
geom_text(aes(label = paste0(round(avg_ride_length, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Trips length (in mins)", title = "Average Trip Length Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 16)+
easy_center_title() +
facet_grid(. ~ `User Type`) +
coord_flip()
#ggplotly(days_graph, tooltip = c("text"))
days_graph
days <-  cyclistic_data_clean %>%
select(Trip_id = `01 - Rental Details Rental ID`, `User Type`, day_of_week, ride_length) %>%
mutate(`Ride Length (in min)` = round(as.numeric(substr(ride_length, 1, 2)) * 60 +
as.numeric(substr(ride_length, 4, 5)) +
as.numeric(substr(ride_length, 7, 8))/60, 2)) %>%
group_by(day_of_week,`User Type` ) %>%
summarize(avg_ride_length = round(mean(`Ride Length (in min)`), 2)) %>%
arrange(day_of_week) %>%   # Optionally sort by day_of_week
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
days_graph <-  ggplot(days, aes(x = day_of_week, y = avg_ride_length, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("User Type: ", `User Type`,"\n","Ride Length: ", avg_ride_length))) +
geom_text(aes(label = paste0(round(avg_ride_length, 2), "%")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Trips length (in mins)", title = "Average Trip Length Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 16)+
easy_center_title() +
facet_grid(. ~ `User Type`) +
coord_flip()
days_graph
#ggplotly(days_graph, tooltip = c("text"))
days <-  cyclistic_data_clean %>%
select(Trip_id = `01 - Rental Details Rental ID`, `User Type`, day_of_week, ride_length) %>%
mutate(`Ride Length (in min)` = round(as.numeric(substr(ride_length, 1, 2)) * 60 +
as.numeric(substr(ride_length, 4, 5)) +
as.numeric(substr(ride_length, 7, 8))/60, 2)) %>%
group_by(day_of_week,`User Type` ) %>%
summarize(avg_ride_length = round(mean(`Ride Length (in min)`), 2)) %>%
arrange(day_of_week) %>%   # Optionally sort by day_of_week
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
days_graph <-  ggplot(days, aes(x = day_of_week, y = avg_ride_length, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("User Type: ", `User Type`,"\n","Ride Length: ", avg_ride_length))) +
geom_text(aes(label = paste0(round(avg_ride_length, 2), "min")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Trips length (in mins)", title = "Average Trip Length Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 16)+
easy_center_title() +
facet_grid(. ~ `User Type`) +
coord_flip()
days_graph
#ggplotly(days_graph, tooltip = c("text"))
days <-  cyclistic_data_clean %>%
select(Trip_id = `01 - Rental Details Rental ID`, `User Type`, day_of_week, ride_length) %>%
mutate(`Ride Length (in min)` = round(as.numeric(substr(ride_length, 1, 2)) * 60 +
as.numeric(substr(ride_length, 4, 5)) +
as.numeric(substr(ride_length, 7, 8))/60, 2)) %>%
group_by(day_of_week,`User Type` ) %>%
summarize(avg_ride_length = round(mean(`Ride Length (in min)`), 2)) %>%
arrange(day_of_week) %>%   # Optionally sort by day_of_week
mutate(day_of_week = factor(day_of_week,
levels = c("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday", "Friday",
"Saturday")))
days_graph <-  ggplot(days, aes(x = day_of_week, y = avg_ride_length, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("User Type: ", `User Type`,"\n","Ride Length: ", avg_ride_length))) +
geom_text(aes(label = paste0(round(avg_ride_length, 2), " min")), position = position_dodge(width = 0.9), hjust = 1) +
labs(x = "Day of the Week", y = "Trips length (in mins)", title = "Average Trip Length Each Day of the Week") +
theme_classic() +
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 16)+
easy_center_title() +
facet_grid(. ~ `User Type`) +
coord_flip()
days_graph
#ggplotly(days_graph, tooltip = c("text"))
# rides by time segments)
`00 to 2` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 0 & hour <= 2 ) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`3 to 5` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 3 & hour <= 5 ) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`6 to 8` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 7 & hour <= 9) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`9 to 11` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 9 & hour <= 11) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`12 to 14` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 12 & hour <= 14) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`15 to 17` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 15 & hour <= 17) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`18 to 20` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 18 & hour <= 20) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`21 to 23` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 21 & hour <= 23) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
combined_results <- bind_rows(
`00 to 2` %>% mutate(Time_Segment = "00 to 2"),
`3 to 5` %>% mutate(Time_Segment = "3 to 5"),
`6 to 8` %>% mutate(Time_Segment = "6 to 8"),
`9 to 11` %>% mutate(Time_Segment = "9 to 11"),
`12 to 14` %>% mutate(Time_Segment = "12 to 14"),
`15 to 17` %>% mutate(Time_Segment = "15 to 17"),
`18 to 20` %>% mutate(Time_Segment = "18 to 20"),
`21 to 23` %>% mutate(Time_Segment = "21 to 23")
) %>%
arrange(`User Type`, desc(percentage))
# Set the order of Time_Segment as a factor
combined_results$Time_Segment <- factor(combined_results$Time_Segment,
levels = c("00 to 2", "3 to 5", "6 to 8",
"9 to 11", "12 to 14", "15 to 17",
"18 to 20", "21 to 23"))
# Plot with ordered Time_Segment
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 1) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customers" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(day_times, tooltip = c("text"))
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 1) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 0.8) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
# rides by time segments)
`00 to 2` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 0 & hour <= 2 ) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`3 to 5` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 3 & hour <= 5 ) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`6 to 8` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 7 & hour <= 9) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`9 to 11` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 9 & hour <= 11) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`12 to 14` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 12 & hour <= 14) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`15 to 17` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 15 & hour <= 17) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`18 to 20` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 18 & hour <= 20) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
`21 to 23` <- cyclistic_data_clean %>%
select(`User Type`,start_local_time ) %>%
mutate(hour = lubridate::hour(start_local_time)  # Extracting hour component
, day = lubridate::day(start_local_time),    # Extracting day component
month = lubridate::month(start_local_time)) %>%  # Extracting month component
filter(hour >= 21 & hour <= 23) %>%
count(`User Type`) %>%
mutate(percentage = round(n / sum(n) * 100, 2))
combined_results <- bind_rows(
`00 to 2` %>% mutate(Time_Segment = "00 to 2"),
`3 to 5` %>% mutate(Time_Segment = "3 to 5"),
`6 to 8` %>% mutate(Time_Segment = "6 to 8"),
`9 to 11` %>% mutate(Time_Segment = "9 to 11"),
`12 to 14` %>% mutate(Time_Segment = "12 to 14"),
`15 to 17` %>% mutate(Time_Segment = "15 to 17"),
`18 to 20` %>% mutate(Time_Segment = "18 to 20"),
`21 to 23` %>% mutate(Time_Segment = "21 to 23")
) %>%
arrange(`User Type`, desc(percentage))
# Set the order of Time_Segment as a factor
combined_results$Time_Segment <- factor(combined_results$Time_Segment,
levels = c("00 to 2", "3 to 5", "6 to 8",
"9 to 11", "12 to 14", "15 to 17",
"18 to 20", "21 to 23"))
# Plot with ordered Time_Segment
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 0.8) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
#ggplotly(day_times, tooltip = c("text"))
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 0.7) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 0.4) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 1.5), vjust = 0.4) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 0.9), vjust = 1.5) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
day_times <- ggplot(combined_results, aes(x = Time_Segment, y = percentage, fill = `User Type`)) +
geom_bar(position = "dodge",stat = "identity",aes(text = paste0("Time of the day: ", Time_Segment,"\n","Percentage: ", percentage))) +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_dodge(width = 1), vjust = 1.5) +
geom_line(aes(group = `User Type`)) +  # Line for each category
labs(x = "Time segment", y = "Percentage of Trips", title = "Percentage of Trips at Every 3 hours") +
theme_classic()+
scale_fill_manual(values = c("Subscriber" = "lightgreen", "Customer" = "yellow")) +
easy_y_axis_title_size(size = 12)+
easy_x_axis_title_size(size = 12)+
easy_plot_title_size(size = 13)+
easy_center_title()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
day_times
